import api from './api';
import MockDataService from './MockDataService';

// Option de configuration pour activer les donn√©es fictives en cas d'erreur
const USE_MOCK_DATA_ON_ERROR = true;

class EditorService {
    // R√©cup√©rer tous les √©diteurs
    async getEditors() {
        try {
            console.log('üìö Tentative de r√©cup√©ration des √©diteurs depuis l\'API...');
            const response = await api.get('/editors');
            console.log('‚úÖ √âditeurs r√©cup√©r√©s avec succ√®s');
            return response.data;
        } catch (error) {
            console.error('‚ùå EditorService: Erreur lors de la r√©cup√©ration des √©diteurs:', error);
            console.error('‚ùå Erreur d√©taill√©e lors du chargement des √©diteurs:', error);
            
            // Solution de secours en utilisant fetch
            try {
                console.log('üîÑ Tentative de r√©cup√©ration des √©diteurs avec fetch comme solution de secours');
                const response = await fetch(`${api.defaults.baseURL}/editors`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    console.error(`‚ùå √âchec de la solution de secours fetch pour √©diteurs: ${response.status}`);
                    
                    // Utiliser les donn√©es fictives si activ√©
                    if (USE_MOCK_DATA_ON_ERROR) {
                        console.log('üß™ Utilisation des donn√©es fictives pour les √©diteurs');
                        return MockDataService.getEditors();
                    }
                    
                    return [];
                }
                
                const data = await response.json();
                return data;
            } catch (fetchError) {
                console.error('‚ùå √âchec complet de la r√©cup√©ration des √©diteurs:', fetchError);
                
                // Utiliser les donn√©es fictives si activ√©
                if (USE_MOCK_DATA_ON_ERROR) {
                    console.log('üß™ Utilisation des donn√©es fictives pour les √©diteurs');
                    return MockDataService.getEditors();
                }
                
                // Retourner un tableau vide en cas d'erreur pour √©viter les erreurs en cascade
                return [];
            }
        }
    }

    // R√©cup√©rer un √©diteur par ID
    async getEditorById(id) {
        try {
            const response = await api.get(`/editors/${id}`);
            return response.data;
        } catch (error) {
            console.error(`EditorService: Erreur lors de la r√©cup√©ration de l'√©diteur ${id}:`, error);
            throw error;
        }
    }

    // Cr√©er un nouvel √©diteur
    async createEditor(editor) {
        try {
            const response = await api.post('/editors', editor);
            return response.data;
        } catch (error) {
            console.error('EditorService: Erreur lors de la cr√©ation de l\'√©diteur:', error);
            throw error;
        }
    }

    // Mettre √† jour un √©diteur
    async updateEditor(id, editor) {
        try {
            const response = await api.put(`/editors/${id}`, editor);
            return response.data;
        } catch (error) {
            console.error(`EditorService: Erreur lors de la mise √† jour de l'√©diteur ${id}:`, error);
            throw error;
        }
    }

    // Supprimer un √©diteur
    async deleteEditor(id) {
        try {
            await api.delete(`/editors/${id}`);
        } catch (error) {
            console.error(`EditorService: Erreur lors de la suppression de l'√©diteur ${id}:`, error);
            throw error;
        }
    }

    // R√©cup√©rer les livres d'un √©diteur
    async getEditorBooks(id) {
        try {
            const response = await api.get(`/editors/${id}/books`);
            return response.data;
        } catch (error) {
            console.error(`EditorService: Erreur lors de la r√©cup√©ration des livres de l'√©diteur ${id}:`, error);
            // Retourner un tableau vide en cas d'erreur
            return [];
        }
    }
}

export default new EditorService(); 