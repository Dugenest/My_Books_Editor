import api from './api';
import MockDataService from './MockDataService';

// Option de configuration pour activer les donn√©es fictives en cas d'erreur
const USE_MOCK_DATA_ON_ERROR = true;

class CategoryService {
    // R√©cup√©rer toutes les cat√©gories avec pagination
    async getAllCategories(page = 0, size = 10) {
        try {
            console.log('üìÇ Tentative de r√©cup√©ration des cat√©gories depuis l\'API...');
            const response = await api.get(`/categories?page=${page}&size=${size}`);
            console.log('‚úÖ Cat√©gories r√©cup√©r√©es avec succ√®s:', response.data);
            
            // V√©rifier la structure de la r√©ponse
            if (response.data && response.data.content) {
                return response.data;
            } else {
                console.warn('‚ö†Ô∏è Structure de r√©ponse inattendue:', response.data);
                return {
                    content: [],
                    totalElements: 0,
                    totalPages: 0,
                    size: size,
                    number: page
                };
            }
        } catch (error) {
            console.error('‚ùå Erreur d√©taill√©e lors de la r√©cup√©ration des cat√©gories:', error);
            console.error('‚ùå Erreur serveur 500 - V√©rifiez les logs du backend');
            
            // Solution de secours en utilisant fetch
            try {
                console.log('üîÑ Tentative de r√©cup√©ration des cat√©gories avec fetch comme solution de secours');
                const response = await fetch(`${api.defaults.baseURL}/categories?page=${page}&size=${size}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    console.error(`‚ùå √âchec de la solution de secours fetch pour cat√©gories: ${response.status}`);
                    
                    // Utiliser les donn√©es fictives si activ√©
                    if (USE_MOCK_DATA_ON_ERROR) {
                        console.log('üß™ Utilisation des donn√©es fictives pour les cat√©gories');
                        return MockDataService.getCategories();
                    }
                    
                    // Retourner un objet de pagination vide en cas d'√©chec
                    return {
                        content: [],
                        totalElements: 0, 
                        totalPages: 0,
                        size: size,
                        number: page
                    };
                }
                
                const data = await response.json();
                return data;
            } catch (fetchError) {
                console.error('‚ùå √âchec complet de la r√©cup√©ration des cat√©gories:', fetchError);
                
                // Utiliser les donn√©es fictives si activ√©
                if (USE_MOCK_DATA_ON_ERROR) {
                    console.log('üß™ Utilisation des donn√©es fictives pour les cat√©gories');
                    return MockDataService.getCategories();
                }
                
                // Retourner un objet de pagination vide
                return {
                    content: [],
                    totalElements: 0,
                    totalPages: 0,
                    size: size,
                    number: page
                };
            }
        }
    }

    // R√©cup√©rer une cat√©gorie par son ID
    async getCategoryById(id) {
        try {
            const response = await api.get(`/categories/${id}`);
            return response.data;
        } catch (error) {
            console.error(`Erreur lors du chargement de la cat√©gorie ${id}:`, error);
            throw error;
        }
    }

    // Cr√©er une nouvelle cat√©gorie
    async createCategory(category) {
        try {
            const response = await api.post('/categories', category);
            return response.data;
        } catch (error) {
            console.error('Erreur lors de la cr√©ation de la cat√©gorie:', error);
            throw error;
        }
    }

    // Mettre √† jour une cat√©gorie
    async updateCategory(id, category) {
        try {
            const response = await api.put(`/categories/${id}`, category);
            return response.data;
        } catch (error) {
            console.error(`Erreur lors de la mise √† jour de la cat√©gorie ${id}:`, error);
            throw error;
        }
    }

    // Supprimer une cat√©gorie
    async deleteCategory(id) {
        try {
            await api.delete(`/categories/${id}`);
        } catch (error) {
            console.error(`Erreur lors de la suppression de la cat√©gorie ${id}:`, error);
            throw error;
        }
    }

    // R√©cup√©rer les livres d'une cat√©gorie
    async getCategoryBooks(id) {
        try {
            const response = await api.get(`/categories/${id}/books`);
            return response.data;
        } catch (error) {
            console.error(`Erreur lors du chargement des livres de la cat√©gorie ${id}:`, error);
            throw error;
        }
    }
}

export default new CategoryService(); 